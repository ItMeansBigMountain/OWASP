i promise to write my notes for education and self improvement. AI can review and can help sort thoughts but my mind is powerful and I will use it thanks.

Hacking an API steps: 
    - Passive Recon: find as much information about your target's api attack surface
    - Active Recon: 


USEFUL SITES :
    - üïµÔ∏è‚Äç‚ôÇÔ∏è Wayback Machine (Site Archives)	https://web.archive.org/
    - üîé Shodan (Device Search)	https://www.shodan.io/
    - üåê Censys (Internet Scan Engine)	https://search.censys.io/
    - üì° BinaryEdge (Global Scanning)	https://app.binaryedge.io/
    - üåé Google Dorking (via Google Search)	https://www.google.com/
    - üß† GitHub (Git Dorking)	https://github.com/
    - üîç GitLab (Public Repo Search)	https://gitlab.com/
    - üï≥Ô∏è Pastebin (Leaked Data Search)	https://pastebin.com/
    - üíÄ LeakIX (Public Leak Scanner)	https://leakix.net/
    - üìß Have I Been Pwned (Email Breach Check)	https://haveibeenpwned.com/
    - üî• crt.sh (Certificate Transparency Logs)	https://crt.sh/
    - üìö GitHub Gists (Hidden file searching)	https://gist.github.com/


---

PASSIVE RECON 
    The act of obtaining information about a target without directly interacting with the target‚Äôs systems
    `OSINT to gather information about the target`
     "Here are 10 weak points before even sending a packet."

    Search public data for 
        - api endpoints
        - api credentials 
        - version information tells you outdated software
        - api documentation
        - api business purpose 
        - business logic flaws
        - api keys and tokens
        - leaked PII like email addresses, phone numbers, etc.

    Useful ideas:
        -JS File Scraping:	Extract hidden API endpoints and keys from JavaScript files
        -Google Cache & GitHub Gists:	Hidden backups accidentally indexed
        -Metadata Extraction (EXIF):	Find leaks inside images/docs (tools like exiftool)

DETECTING APIS 
    
    - look for api url naming schemes
        - ex: targetname.com/api/v1
        - ex: api.targetname.com/v1

    - http request and request/response headers 
        - json or xml request/response
        - headers containing content-type : application-json 
        - headers containing content-type : application-xml 

    - response containing {missing authorization token }

STRATEGIES FOR PASSIVE RECON 
    - search engines 
        - google dorking
        - shodan.io
        - censys.io
        - binaryedge.io

    - social media 
        - twitter.com (x.com)
        - github.com
        - pastebin.com

    - public repositories 
        - github.com
        - gitlab.com

    - public data leaks 
        - haveibeenpwned.com
        - leakix.net

GOOGLE DORKing
    Parameterize your google search for more niche results 
    EXAMPLE: 
        - intitle:"<keyword>" site:"<domain>"
        - inurl:"/<endpoint>" site:"<domain>"

GIT DORKing
    - Searching github for sensitive information like api keys, secrets, tokens, etc.
    - look at 
        - repositories
        - issues 
        - comments 
        - commit history 
        - pull requests 

    PARAMETERS FOR DORKing:
        - path:/appsettings.json
        - path:*/appsettings.json
        - filename:appsettings.json
        - extension:json "password" OR "secret" OR "token"
        - filename:appsettings.json "ConnectionStrings"
        - extension:json "private_key" OR "client_secret"
        - path:*/config.json
        - path:*/.env
        - extension:json "aws_access_key_id"
        - extension:json "Authorization" OR "access_token"

    LOOK FOR:
        - Common headers like "Authorization Bearer" or "X-Api-Key"
        - Common tokens like "access_token" or "client_secret"

    EXAMPLE FOR CHATGPT KEYS:
        -"Authorization: Bearer sk-"
        - OPENAI CHAT GPT keys always start with sk- and are 51 characters long

SHODAN DORKing
    - Shodan is a search engine for internet-connected devices and services
    - It allows you to search for specific devices, services, or vulnerabilities based on various parameters

    PARAMETERS FOR DORKing:
        - "product: <product_name>"
        - "version: <version_number>"
        - "port: <port_number>"
        - "country: <country_code>"
        - "city: <city_name>"
        - "hostname: <hostname>"
        - "os: <operating_system>"

    
    Useful Shodan Queries

    -hostname:"targetname.com": Use this in combonation with other queries
    - "content-type: application/json" : This query will filter results that respond with JSON.
    - "content-type: application/xml" : This query will filter results that respond with XML.
    - "200 OK" : Display responses with status codes
    - "wp-json" : This will search for web applications using the WordPress API.




WAYBACK MACHINE DORKing
    go back in a website's history to find old/removed information 
    https://web.archive.org/

    Zombie APIs fall under the Improper Assets Management vulnerability on the OWASP API Security Top 10 list

    Useful ideas:
        Usernames and Emails: Forum leaks or Old Wordpress /author/ pages
        Internal Portal Links: Early versions of websites expose URLs to employee login portals or admin panels.	/admin/login.php discovered
        Recover Exposed S3/Storage account blob Buckets: 	Find old hardcoded S3 URLs pointing to still-open buckets	Access to files, backups, internal data
        JavaScript Files (.js)	Endpoint URLs, secrets, internal API calls

---

ACTIVE RECON 
    You are touching the target, generating logs, and possibly triggering alerts.
